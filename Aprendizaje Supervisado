{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNuqTB+TtGg9lj0t6GkSUn1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RR77ui/Business-Intelligence/blob/main/Aprendizaje%20Supervisado\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Caso de Estudio**\n",
        "Encontrar el mejor modelo de prediccion para el siguiente caso:\n",
        "Una compañia de venta de casas quiere analizar un modelo predictivo para predecir el precio de la vivienda por unidad de área, para esto se un data set con 414 registros y 7 Variables a analizar como lo son dia de transacccion, años de la casa, metros de distancia a una estacion de metro, numero de tiendas de conveniencia cercanas, longitud y Latitud\n"
      ],
      "metadata": {
        "id": "MgSxH_diTLJx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4yT9dpSyTHlI",
        "outputId": "ffda5c7f-6803-464e-c8bc-92d50614bf33"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploracion de los datos"
      ],
      "metadata": {
        "id": "00nyB8WdZWCu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "path='/content/drive/MyDrive/Aprendizaje Supervisado/Real estate.csv'\n",
        "df=pd.read_csv(path)\n",
        "df.head()\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "snnLflzTT0Am",
        "outputId": "19274771-8176-4b3e-d584-88f2d6a68927"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               No  X1 transaction date  X2 house age  \\\n",
              "count  414.000000           414.000000    414.000000   \n",
              "mean   207.500000          2013.148971     17.712560   \n",
              "std    119.655756             0.281967     11.392485   \n",
              "min      1.000000          2012.667000      0.000000   \n",
              "25%    104.250000          2012.917000      9.025000   \n",
              "50%    207.500000          2013.167000     16.100000   \n",
              "75%    310.750000          2013.417000     28.150000   \n",
              "max    414.000000          2013.583000     43.800000   \n",
              "\n",
              "       X3 distance to the nearest MRT station  \\\n",
              "count                              414.000000   \n",
              "mean                              1083.885689   \n",
              "std                               1262.109595   \n",
              "min                                 23.382840   \n",
              "25%                                289.324800   \n",
              "50%                                492.231300   \n",
              "75%                               1454.279000   \n",
              "max                               6488.021000   \n",
              "\n",
              "       X4 number of convenience stores  X5 latitude  X6 longitude  \\\n",
              "count                       414.000000   414.000000    414.000000   \n",
              "mean                          4.094203    24.969030    121.533361   \n",
              "std                           2.945562     0.012410      0.015347   \n",
              "min                           0.000000    24.932070    121.473530   \n",
              "25%                           1.000000    24.963000    121.528085   \n",
              "50%                           4.000000    24.971100    121.538630   \n",
              "75%                           6.000000    24.977455    121.543305   \n",
              "max                          10.000000    25.014590    121.566270   \n",
              "\n",
              "       Y house price of unit area  \n",
              "count                  414.000000  \n",
              "mean                    37.980193  \n",
              "std                     13.606488  \n",
              "min                      7.600000  \n",
              "25%                     27.700000  \n",
              "50%                     38.450000  \n",
              "75%                     46.600000  \n",
              "max                    117.500000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6b2200bb-9e16-46b6-bdff-6446156f04a6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>No</th>\n",
              "      <th>X1 transaction date</th>\n",
              "      <th>X2 house age</th>\n",
              "      <th>X3 distance to the nearest MRT station</th>\n",
              "      <th>X4 number of convenience stores</th>\n",
              "      <th>X5 latitude</th>\n",
              "      <th>X6 longitude</th>\n",
              "      <th>Y house price of unit area</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>414.000000</td>\n",
              "      <td>414.000000</td>\n",
              "      <td>414.000000</td>\n",
              "      <td>414.000000</td>\n",
              "      <td>414.000000</td>\n",
              "      <td>414.000000</td>\n",
              "      <td>414.000000</td>\n",
              "      <td>414.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>207.500000</td>\n",
              "      <td>2013.148971</td>\n",
              "      <td>17.712560</td>\n",
              "      <td>1083.885689</td>\n",
              "      <td>4.094203</td>\n",
              "      <td>24.969030</td>\n",
              "      <td>121.533361</td>\n",
              "      <td>37.980193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>119.655756</td>\n",
              "      <td>0.281967</td>\n",
              "      <td>11.392485</td>\n",
              "      <td>1262.109595</td>\n",
              "      <td>2.945562</td>\n",
              "      <td>0.012410</td>\n",
              "      <td>0.015347</td>\n",
              "      <td>13.606488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>2012.667000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>23.382840</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>24.932070</td>\n",
              "      <td>121.473530</td>\n",
              "      <td>7.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>104.250000</td>\n",
              "      <td>2012.917000</td>\n",
              "      <td>9.025000</td>\n",
              "      <td>289.324800</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>24.963000</td>\n",
              "      <td>121.528085</td>\n",
              "      <td>27.700000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>207.500000</td>\n",
              "      <td>2013.167000</td>\n",
              "      <td>16.100000</td>\n",
              "      <td>492.231300</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>24.971100</td>\n",
              "      <td>121.538630</td>\n",
              "      <td>38.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>310.750000</td>\n",
              "      <td>2013.417000</td>\n",
              "      <td>28.150000</td>\n",
              "      <td>1454.279000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>24.977455</td>\n",
              "      <td>121.543305</td>\n",
              "      <td>46.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>414.000000</td>\n",
              "      <td>2013.583000</td>\n",
              "      <td>43.800000</td>\n",
              "      <td>6488.021000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>25.014590</td>\n",
              "      <td>121.566270</td>\n",
              "      <td>117.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b2200bb-9e16-46b6-bdff-6446156f04a6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6b2200bb-9e16-46b6-bdff-6446156f04a6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6b2200bb-9e16-46b6-bdff-6446156f04a6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e1fe207c-f223-4cbf-a287-9b3f6ecb5ca7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1fe207c-f223-4cbf-a287-9b3f6ecb5ca7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e1fe207c-f223-4cbf-a287-9b3f6ecb5ca7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 148.9029346356823,\n        \"min\": 1.0,\n        \"max\": 414.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          414.0,\n          207.5,\n          310.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X1 transaction date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 843.3000378322719,\n        \"min\": 0.2819672402630118,\n        \"max\": 2013.583,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2013.1489710144926,\n          2013.167,\n          414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X2 house age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 140.61941367093425,\n        \"min\": 0.0,\n        \"max\": 414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          17.71256038647343,\n          16.1,\n          414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3 distance to the nearest MRT station\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2101.800623848225,\n        \"min\": 23.38284,\n        \"max\": 6488.021,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1083.8856889130436,\n          492.2313,\n          414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X4 number of convenience stores\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144.98745986870523,\n        \"min\": 0.0,\n        \"max\": 414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.094202898550725,\n          4.0,\n          414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X5 latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 139.0775612485308,\n        \"min\": 0.012410196590450335,\n        \"max\": 414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          24.969030072463767,\n          24.9711,\n          414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X6 longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.5045070391186,\n        \"min\": 0.015347183004592205,\n        \"max\": 414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          121.53336108695655,\n          121.53863,\n          414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Y house price of unit area\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135.98949464428566,\n        \"min\": 7.6,\n        \"max\": 414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.980193236714975,\n          38.45,\n          414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Particion de los datos"
      ],
      "metadata": {
        "id": "utUrNyznZZlj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X = df.drop(['Y house price of unit area','No'], axis=1)\n",
        "y = df['Y house price of unit area']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "fAETkB_AW6Ff"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_train = pd.concat([y_train, X_train], axis=1)\n",
        "df_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1XMV8a_nYfaC",
        "outputId": "d814fca3-5404-4731-cd2b-29eb45019a07"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Y house price of unit area  X1 transaction date  X2 house age  \\\n",
              "7                          46.7             2013.417          20.3   \n",
              "194                        29.3             2013.500          15.2   \n",
              "19                         47.7             2012.667           1.5   \n",
              "176                        19.2             2012.833          13.9   \n",
              "367                        20.9             2012.833          15.0   \n",
              "\n",
              "     X3 distance to the nearest MRT station  X4 number of convenience stores  \\\n",
              "7                                 287.60250                                6   \n",
              "194                              3771.89500                                0   \n",
              "19                                 23.38284                                7   \n",
              "176                              4573.77900                                0   \n",
              "367                              1828.31900                                2   \n",
              "\n",
              "     X5 latitude  X6 longitude  \n",
              "7       24.98042     121.54228  \n",
              "194     24.93363     121.51158  \n",
              "19      24.96772     121.54102  \n",
              "176     24.94867     121.49507  \n",
              "367     24.96464     121.51531  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8803bce-ddaa-4449-bbea-55416c695796\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Y house price of unit area</th>\n",
              "      <th>X1 transaction date</th>\n",
              "      <th>X2 house age</th>\n",
              "      <th>X3 distance to the nearest MRT station</th>\n",
              "      <th>X4 number of convenience stores</th>\n",
              "      <th>X5 latitude</th>\n",
              "      <th>X6 longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>46.7</td>\n",
              "      <td>2013.417</td>\n",
              "      <td>20.3</td>\n",
              "      <td>287.60250</td>\n",
              "      <td>6</td>\n",
              "      <td>24.98042</td>\n",
              "      <td>121.54228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>29.3</td>\n",
              "      <td>2013.500</td>\n",
              "      <td>15.2</td>\n",
              "      <td>3771.89500</td>\n",
              "      <td>0</td>\n",
              "      <td>24.93363</td>\n",
              "      <td>121.51158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>47.7</td>\n",
              "      <td>2012.667</td>\n",
              "      <td>1.5</td>\n",
              "      <td>23.38284</td>\n",
              "      <td>7</td>\n",
              "      <td>24.96772</td>\n",
              "      <td>121.54102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>19.2</td>\n",
              "      <td>2012.833</td>\n",
              "      <td>13.9</td>\n",
              "      <td>4573.77900</td>\n",
              "      <td>0</td>\n",
              "      <td>24.94867</td>\n",
              "      <td>121.49507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>367</th>\n",
              "      <td>20.9</td>\n",
              "      <td>2012.833</td>\n",
              "      <td>15.0</td>\n",
              "      <td>1828.31900</td>\n",
              "      <td>2</td>\n",
              "      <td>24.96464</td>\n",
              "      <td>121.51531</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8803bce-ddaa-4449-bbea-55416c695796')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c8803bce-ddaa-4449-bbea-55416c695796 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c8803bce-ddaa-4449-bbea-55416c695796');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ce0ae5c2-a440-4b66-9c51-695636f65979\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce0ae5c2-a440-4b66-9c51-695636f65979')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ce0ae5c2-a440-4b66-9c51-695636f65979 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train",
              "summary": "{\n  \"name\": \"df_train\",\n  \"rows\": 289,\n  \"fields\": [\n    {\n      \"column\": \"Y house price of unit area\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.863699526176104,\n        \"min\": 11.6,\n        \"max\": 117.5,\n        \"num_unique_values\": 209,\n        \"samples\": [\n          42.4,\n          19.1,\n          21.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X1 transaction date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2828559264533126,\n        \"min\": 2012.667,\n        \"max\": 2013.583,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2013.167,\n          2013.25,\n          2013.417\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X2 house age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.40289352017501,\n        \"min\": 0.0,\n        \"max\": 42.7,\n        \"num_unique_values\": 195,\n        \"samples\": [\n          10.0,\n          28.6,\n          17.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3 distance to the nearest MRT station\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1248.4680161997057,\n        \"min\": 23.38284,\n        \"max\": 6306.153,\n        \"num_unique_values\": 198,\n        \"samples\": [\n          1360.139,\n          338.9679,\n          197.1338\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X4 number of convenience stores\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5,\n          6,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X5 latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.012524116924308843,\n        \"min\": 24.93363,\n        \"max\": 25.01459,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          24.97347,\n          24.95618,\n          24.94925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X6 longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.015106394824237162,\n        \"min\": 121.47516,\n        \"max\": 121.56627,\n        \"num_unique_values\": 183,\n        \"samples\": [\n          121.54348,\n          121.53844,\n          121.54119\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr_matrix = df_train.corr()\n",
        "corr_matrix"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "KSqRODxtfNjX",
        "outputId": "08fe7346-745c-4004-fb06-99c0cd9233b3"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                        Y house price of unit area  \\\n",
              "Y house price of unit area                                1.000000   \n",
              "X1 transaction date                                       0.081105   \n",
              "X2 house age                                             -0.204978   \n",
              "X3 distance to the nearest MRT station                   -0.678174   \n",
              "X4 number of convenience stores                           0.574187   \n",
              "X5 latitude                                               0.549832   \n",
              "X6 longitude                                              0.526084   \n",
              "\n",
              "                                        X1 transaction date  X2 house age  \\\n",
              "Y house price of unit area                         0.081105     -0.204978   \n",
              "X1 transaction date                                1.000000      0.013485   \n",
              "X2 house age                                       0.013485      1.000000   \n",
              "X3 distance to the nearest MRT station             0.080023      0.046619   \n",
              "X4 number of convenience stores                   -0.028160      0.020733   \n",
              "X5 latitude                                        0.022414      0.026494   \n",
              "X6 longitude                                      -0.056164     -0.069503   \n",
              "\n",
              "                                        X3 distance to the nearest MRT station  \\\n",
              "Y house price of unit area                                           -0.678174   \n",
              "X1 transaction date                                                   0.080023   \n",
              "X2 house age                                                          0.046619   \n",
              "X3 distance to the nearest MRT station                                1.000000   \n",
              "X4 number of convenience stores                                      -0.610834   \n",
              "X5 latitude                                                          -0.559727   \n",
              "X6 longitude                                                         -0.820703   \n",
              "\n",
              "                                        X4 number of convenience stores  \\\n",
              "Y house price of unit area                                     0.574187   \n",
              "X1 transaction date                                           -0.028160   \n",
              "X2 house age                                                   0.020733   \n",
              "X3 distance to the nearest MRT station                        -0.610834   \n",
              "X4 number of convenience stores                                1.000000   \n",
              "X5 latitude                                                    0.434704   \n",
              "X6 longitude                                                   0.465457   \n",
              "\n",
              "                                        X5 latitude  X6 longitude  \n",
              "Y house price of unit area                 0.549832      0.526084  \n",
              "X1 transaction date                        0.022414     -0.056164  \n",
              "X2 house age                               0.026494     -0.069503  \n",
              "X3 distance to the nearest MRT station    -0.559727     -0.820703  \n",
              "X4 number of convenience stores            0.434704      0.465457  \n",
              "X5 latitude                                1.000000      0.408543  \n",
              "X6 longitude                               0.408543      1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-465dc204-c0e5-480d-9293-36e4cfa2c101\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Y house price of unit area</th>\n",
              "      <th>X1 transaction date</th>\n",
              "      <th>X2 house age</th>\n",
              "      <th>X3 distance to the nearest MRT station</th>\n",
              "      <th>X4 number of convenience stores</th>\n",
              "      <th>X5 latitude</th>\n",
              "      <th>X6 longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Y house price of unit area</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.081105</td>\n",
              "      <td>-0.204978</td>\n",
              "      <td>-0.678174</td>\n",
              "      <td>0.574187</td>\n",
              "      <td>0.549832</td>\n",
              "      <td>0.526084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X1 transaction date</th>\n",
              "      <td>0.081105</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.013485</td>\n",
              "      <td>0.080023</td>\n",
              "      <td>-0.028160</td>\n",
              "      <td>0.022414</td>\n",
              "      <td>-0.056164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X2 house age</th>\n",
              "      <td>-0.204978</td>\n",
              "      <td>0.013485</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.046619</td>\n",
              "      <td>0.020733</td>\n",
              "      <td>0.026494</td>\n",
              "      <td>-0.069503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X3 distance to the nearest MRT station</th>\n",
              "      <td>-0.678174</td>\n",
              "      <td>0.080023</td>\n",
              "      <td>0.046619</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.610834</td>\n",
              "      <td>-0.559727</td>\n",
              "      <td>-0.820703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X4 number of convenience stores</th>\n",
              "      <td>0.574187</td>\n",
              "      <td>-0.028160</td>\n",
              "      <td>0.020733</td>\n",
              "      <td>-0.610834</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.434704</td>\n",
              "      <td>0.465457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X5 latitude</th>\n",
              "      <td>0.549832</td>\n",
              "      <td>0.022414</td>\n",
              "      <td>0.026494</td>\n",
              "      <td>-0.559727</td>\n",
              "      <td>0.434704</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.408543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X6 longitude</th>\n",
              "      <td>0.526084</td>\n",
              "      <td>-0.056164</td>\n",
              "      <td>-0.069503</td>\n",
              "      <td>-0.820703</td>\n",
              "      <td>0.465457</td>\n",
              "      <td>0.408543</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-465dc204-c0e5-480d-9293-36e4cfa2c101')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-465dc204-c0e5-480d-9293-36e4cfa2c101 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-465dc204-c0e5-480d-9293-36e4cfa2c101');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-46a1bd83-e11b-4feb-b2a8-8bfefe9995ae\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46a1bd83-e11b-4feb-b2a8-8bfefe9995ae')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-46a1bd83-e11b-4feb-b2a8-8bfefe9995ae button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_8dea579c-e3de-4bf4-8716-bb89d746b95b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('corr_matrix')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8dea579c-e3de-4bf4-8716-bb89d746b95b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('corr_matrix');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "corr_matrix",
              "summary": "{\n  \"name\": \"corr_matrix\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Y house price of unit area\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5670660421608532,\n        \"min\": -0.6781742812775202,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          0.08110452200440389,\n          0.5498318972098555\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X1 transaction date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37433069829137433,\n        \"min\": -0.0561637576280342,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.08110452200440389,\n          1.0,\n          0.022413831664198306\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X2 house age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.398171325866528,\n        \"min\": -0.20497790825169793,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.20497790825169793,\n          0.013485037323170482,\n          0.026493582000866843\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X3 distance to the nearest MRT station\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6440020576618517,\n        \"min\": -0.8207030797913826,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.6781742812775202,\n          0.08002311107458378,\n          -0.5597273121985058\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X4 number of convenience stores\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5192137973860314,\n        \"min\": -0.6108335833682763,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.5741872507091735,\n          -0.028160251997131028,\n          0.4347038226745696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X5 latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4943953419082022,\n        \"min\": -0.5597273121985058,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.5498318972098555,\n          0.022413831664198306,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X6 longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5830899168195254,\n        \"min\": -0.8207030797913826,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.5260838852437639,\n          -0.0561637576280342,\n          0.40854294172392336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modelo de Regresion Lineal simple"
      ],
      "metadata": {
        "id": "BudOtr8AZdiX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "# Para usar las variables de la regresión, estas deben ser tipo array\n",
        "X = np.array(X_train)\n",
        "Y = np.array(y_train).reshape(-1, 1)\n",
        "\n",
        "# Modelo de regresión\n",
        "modelo = LinearRegression()\n",
        "modelo.fit(X, Y)\n",
        "\n",
        "# Ver coeficientes\n",
        "print(\"Intercepto (a):\", modelo.intercept_)\n",
        "print(\"Pendiente (b):\", modelo.coef_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QNVKsFtrXjwP",
        "outputId": "342533e8-b40c-408f-ec40-5fdae9bc9fd3"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Intercepto (a): [-11350.74051877]\n",
            "Pendiente (b): [[ 5.84779706e+00 -2.42545813e-01 -5.13873381e-03  1.07449530e+00\n",
            "   2.39096949e+02 -5.22351591e+01]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modelo de regresion Foward Best"
      ],
      "metadata": {
        "id": "GX9r28rQgkjg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Este es el metodo que vamos a utilizar siempre\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n",
        "from sklearn.datasets import make_regression\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Modelo base\n",
        "lr = LinearRegression()\n",
        "\n",
        "# Forward selection\n",
        "sfs = SFS(lr,\n",
        "          k_features='best',   # Puede ser número fijo o 'best'\n",
        "          forward=True,        # True = forward, False = backward\n",
        "          floating=False,      # True para stepwise mixto\n",
        "          scoring='r2',\n",
        "          cv=5)\n",
        "\n",
        "sfs = sfs.fit(X_train, y_train)\n",
        "\n",
        "print(\"Variables seleccionadas usando SequentialFeatureSelector (Forward):\", sfs.k_feature_names_)\n",
        "\n",
        "# Crear y ajustar el modelo OLS con las variables seleccionadas\n",
        "X_train_selected = sm.add_constant(X_train[list(sfs.k_feature_names_)])\n",
        "model_sfs = sm.OLS(y_train, X_train_selected).fit()\n",
        "\n",
        "# Resumen del modelo OLS\n",
        "print(\"\\nResumen del modelo OLS con variables seleccionadas por SequentialFeatureSelector:\")\n",
        "print(model_sfs.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Zy6mckSYW5f",
        "outputId": "ddc2df68-6bd5-4f32-c0d0-693e907506e3"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables seleccionadas usando SequentialFeatureSelector (Forward): ('X1 transaction date', 'X2 house age', 'X3 distance to the nearest MRT station', 'X4 number of convenience stores', 'X5 latitude')\n",
            "\n",
            "Resumen del modelo OLS con variables seleccionadas por SequentialFeatureSelector:\n",
            "                                OLS Regression Results                                \n",
            "======================================================================================\n",
            "Dep. Variable:     Y house price of unit area   R-squared:                       0.585\n",
            "Model:                                    OLS   Adj. R-squared:                  0.578\n",
            "Method:                         Least Squares   F-statistic:                     79.84\n",
            "Date:                        Fri, 05 Sep 2025   Prob (F-statistic):           4.91e-52\n",
            "Time:                                15:39:53   Log-Likelihood:                -1042.3\n",
            "No. Observations:                         289   AIC:                             2097.\n",
            "Df Residuals:                             283   BIC:                             2119.\n",
            "Df Model:                                   5                                         \n",
            "Covariance Type:                    nonrobust                                         \n",
            "==========================================================================================================\n",
            "                                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "----------------------------------------------------------------------------------------------------------\n",
            "const                                  -1.772e+04   3920.670     -4.520      0.000   -2.54e+04      -1e+04\n",
            "X1 transaction date                        5.8050      1.889      3.073      0.002       2.087       9.523\n",
            "X2 house age                              -0.2408      0.047     -5.149      0.000      -0.333      -0.149\n",
            "X3 distance to the nearest MRT station    -0.0046      0.001     -7.693      0.000      -0.006      -0.003\n",
            "X4 number of convenience stores            1.0866      0.227      4.787      0.000       0.640       1.533\n",
            "X5 latitude                              243.3418     51.901      4.689      0.000     141.181     345.503\n",
            "==============================================================================\n",
            "Omnibus:                      207.155   Durbin-Watson:                   2.012\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             3895.259\n",
            "Skew:                           2.630   Prob(JB):                         0.00\n",
            "Kurtosis:                      20.200   Cond. No.                     1.75e+07\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 1.75e+07. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Metricas de error"
      ],
      "metadata": {
        "id": "j1IsI0bBZ1fT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import numpy as np\n",
        "\n",
        "# Predict on the test set\n",
        "# Select only the columns used for training from the test set before adding the constant\n",
        "X_test_selected = sm.add_constant(X_test[list(sfs.k_feature_names_)])\n",
        "y_pred = model_sfs.predict(X_test_selected)\n",
        "\n",
        "# Calculate metrics\n",
        "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Calculate Adjusted R2\n",
        "n = X_test.shape[0]  # Number of observations\n",
        "p = X_test_selected.shape[1] - 1 # Number of features (excluding the constant)\n",
        "adjusted_r2 = 1 - (1 - r2) * (n - 1) / (n - p - 1)\n",
        "\n",
        "# Calculate MAPE (add a small epsilon to prevent division by zero)\n",
        "epsilon = 1e-10\n",
        "mape = np.mean(np.abs((y_test - y_pred) / (y_test + epsilon))) * 100\n",
        "\n",
        "\n",
        "print(\"--- Linear Regression Model Metrics (Test Set) ---\")\n",
        "print(f\"RMSE: {rmse:.2f}\")\n",
        "print(f\"MAE: {mae:.2f}\")\n",
        "print(f\"R2: {r2:.2f}\")\n",
        "print(f\"Adjusted R2: {adjusted_r2:.2f}\")\n",
        "print(f\"MAPE: {mape:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w2AJX8ZTZUAg",
        "outputId": "71eee5a9-6fab-458f-b3b9-b7e37de134db"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Linear Regression Model Metrics (Test Set) ---\n",
            "RMSE: 8.53\n",
            "MAE: 6.14\n",
            "R2: 0.57\n",
            "Adjusted R2: 0.55\n",
            "MAPE: 21.66%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "current_aic = model_sfs.aic\n",
        "current_bic = model_sfs.bic\n",
        "print(\"aic:\", current_aic)\n",
        "print(\"bic:\", current_bic)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wmDTfj4CfzmF",
        "outputId": "a6dbf3e6-e3f1-4fc1-8d6c-c93add655591"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "aic: 2096.57907713374\n",
            "bic: 2118.5776372624146\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Modelos regularizados**"
      ],
      "metadata": {
        "id": "X1p6DSXHfrMS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Ridge, Lasso, ElasticNet\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import numpy as np\n",
        "\n",
        "# Define the features (X) and target (y)\n",
        "# Using all features from X_train and X_test as SFS is not defined\n",
        "X_train_regularized = X_train\n",
        "X_test_regularized = X_test\n",
        "\n",
        "# Add a small epsilon to prevent division by zero in MAPE\n",
        "epsilon = 1e-10\n",
        "\n",
        "# Ridge Regression\n",
        "ridge_model = Ridge(alpha=1.0) # You can tune alpha\n",
        "ridge_model.fit(X_train_regularized, y_train)\n",
        "y_pred_ridge = ridge_model.predict(X_test_regularized)\n",
        "\n",
        "print(\"--- Ridge Regression ---\")\n",
        "print(f\"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred_ridge)):.2f}\")\n",
        "print(f\"MAE: {mean_absolute_error(y_test, y_pred_ridge):.2f}\")\n",
        "mape_ridge = np.mean(np.abs((y_test - y_pred_ridge) / (y_test + epsilon))) * 100\n",
        "print(f\"MAPE: {mape_ridge:.2f}%\")\n",
        "print(f\"R2: {r2_score(y_test, y_pred_ridge):.2f}\")\n",
        "print(f\"Adjusted R2: {adjusted_r2:.2f}\")\n",
        "\n",
        "# Lasso Regression\n",
        "lasso_model = Lasso(alpha=1.0) # You can tune alpha\n",
        "lasso_model.fit(X_train_regularized, y_train)\n",
        "y_pred_lasso = lasso_model.predict(X_test_regularized)\n",
        "\n",
        "print(\"\\n--- Lasso Regression ---\")\n",
        "print(f\"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred_lasso)):.2f}\")\n",
        "print(f\"MAE: {mean_absolute_error(y_test, y_pred_lasso):.2f}\")\n",
        "mape_lasso = np.mean(np.abs((y_test - y_pred_lasso) / (y_test + epsilon))) * 100\n",
        "print(f\"MAPE: {mape_lasso:.2f}%\")\n",
        "print(f\"R2: {r2_score(y_test, y_pred_lasso):.2f}\")\n",
        "print(f\"Adjusted R2: {adjusted_r2:.2f}\")\n",
        "\n",
        "# Elastic Net Regression\n",
        "elastic_net_model = ElasticNet(alpha=1.0, l1_ratio=0.5) # You can tune alpha and l1_ratio\n",
        "elastic_net_model.fit(X_train_regularized, y_train)\n",
        "y_pred_elastic_net = elastic_net_model.predict(X_test_regularized)\n",
        "\n",
        "print(\"\\n--- Elastic Net Regression ---\")\n",
        "print(f\"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred_elastic_net)):.2f}\")\n",
        "print(f\"MAE: {mean_absolute_error(y_test, y_pred_elastic_net):.2f}\")\n",
        "mape_elastic_net = np.mean(np.abs((y_test - y_pred_elastic_net) / (y_test + epsilon))) * 100\n",
        "print(f\"MAPE: {mape_elastic_net:.2f}%\")\n",
        "print(f\"R2: {r2_score(y_test, y_pred_elastic_net):.2f}\")\n",
        "print(f\"Adjusted R2: {adjusted_r2:.2f}\")\n",
        "\n",
        "\n",
        "\n",
        "print(\"--- Linear Regression Model Metrics (Test Set) ---\")\n",
        "print(f\"RMSE: {rmse:.2f}\")\n",
        "print(f\"MAE: {mae:.2f}\")\n",
        "print(f\"R2: {r2:.2f}\")\n",
        "print(f\"Adjusted R2: {adjusted_r2:.2f}\")\n",
        "print(f\"MAPE: {mape:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5-GZ2lvHfuXK",
        "outputId": "f3425ec5-fd9b-404c-9b52-ca9f82cd0056"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Ridge Regression ---\n",
            "RMSE: 8.63\n",
            "MAE: 6.33\n",
            "MAPE: 22.62%\n",
            "R2: 0.56\n",
            "\n",
            "--- Lasso Regression ---\n",
            "RMSE: 8.73\n",
            "MAE: 6.37\n",
            "MAPE: 22.99%\n",
            "R2: 0.54\n",
            "\n",
            "--- Elastic Net Regression ---\n",
            "RMSE: 8.73\n",
            "MAE: 6.36\n",
            "MAPE: 22.98%\n",
            "R2: 0.54\n",
            "--- Linear Regression Model Metrics (Test Set) ---\n",
            "RMSE: 8.53\n",
            "MAE: 6.14\n",
            "R2: 0.57\n",
            "Adjusted R2: 0.55\n",
            "MAPE: 21.66%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Coeficientes de Modelo de regresion regularizada"
      ],
      "metadata": {
        "id": "uMWdtktOhxln"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- Linear Regression Coefficients ---\")\n",
        "print(\"Intercept (const):\", model_sfs.params['const'])\n",
        "for feature, coef in zip(X_train_regularized.columns, model_sfs.params[1:]):\n",
        "    print(f\"{feature}: {coef:.4f}\")\n",
        "\n",
        "print(\"\\n--- Ridge Regression Coefficients ---\")\n",
        "for feature, coef in zip(X_train_regularized.columns, ridge_model.coef_):\n",
        "    print(f\"{feature}: {coef:.4f}\")\n",
        "\n",
        "print(\"\\n--- Lasso Regression Coefficients ---\")\n",
        "for feature, coef in zip(X_train_regularized.columns, lasso_model.coef_):\n",
        "    print(f\"{feature}: {coef:.4f}\")\n",
        "\n",
        "print(\"\\n--- Elastic Net Regression Coefficients ---\")\n",
        "for feature, coef in zip(X_train_regularized.columns, elastic_net_model.coef_):\n",
        "    print(f\"{feature}: {coef:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P_Nqg7PvhxJI",
        "outputId": "2d8026a7-9b35-4abf-8867-ecd5a0a5fa0e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Linear Regression Coefficients ---\n",
            "Intercept (const): -17719.61096160066\n",
            "X1 transaction date: 5.8050\n",
            "X2 house age: -0.2408\n",
            "X3 distance to the nearest MRT station: -0.0046\n",
            "X4 number of convenience stores: 1.0866\n",
            "X5 latitude: 243.3418\n",
            "\n",
            "--- Ridge Regression Coefficients ---\n",
            "X1 transaction date: 6.2066\n",
            "X2 house age: -0.2291\n",
            "X3 distance to the nearest MRT station: -0.0057\n",
            "X4 number of convenience stores: 1.2271\n",
            "X5 latitude: 7.1296\n",
            "X6 longitude: -1.6401\n",
            "\n",
            "--- Lasso Regression Coefficients ---\n",
            "X1 transaction date: 0.0000\n",
            "X2 house age: -0.2173\n",
            "X3 distance to the nearest MRT station: -0.0059\n",
            "X4 number of convenience stores: 1.0696\n",
            "X5 latitude: 0.0000\n",
            "X6 longitude: -0.0000\n",
            "\n",
            "--- Elastic Net Regression Coefficients ---\n",
            "X1 transaction date: 0.0300\n",
            "X2 house age: -0.2203\n",
            "X3 distance to the nearest MRT station: -0.0059\n",
            "X4 number of convenience stores: 1.0645\n",
            "X5 latitude: 0.0000\n",
            "X6 longitude: -0.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modelo despues de regularizacion"
      ],
      "metadata": {
        "id": "HhElE9iiiwW1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_desr = df.drop(['Y house price of unit area','No','X1 transaction date','X3 distance to the nearest MRT station','X5 latitude','X6 longitude'], axis=1)\n",
        "y_desr = df['Y house price of unit area']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_desr, y_desr, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "g7c5JC6miycu"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "# Para usar las variables de la regresión, estas deben ser tipo array\n",
        "X_desr = np.array(X_train)\n",
        "Y_desr = np.array(y_train).reshape(-1, 1)\n",
        "\n",
        "# Modelo de regresión\n",
        "modelo = LinearRegression()\n",
        "modelo.fit(X_desr, Y_desr)\n",
        "\n",
        "# Ver coeficientes\n",
        "print(\"Intercepto (a):\", modelo.intercept_)\n",
        "print(\"Pendiente (b):\", modelo.coef_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U35y7xyGj3Ea",
        "outputId": "8439c143-66ee-4301-c061-23999ea450c1"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Intercepto (a): [31.83281554]\n",
            "Pendiente (b): [[-0.26380053  2.68461971]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Este es el metodo que vamos a utilizar siempre\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Modelo base\n",
        "lr_desr = LinearRegression()\n",
        "\n",
        "# Forward selection\n",
        "# Set k_features to the number of columns in the current X_train\n",
        "sfs2 = SFS(lr_desr,  # Use lr_desr which is defined in this section\n",
        "          k_features=X_train.shape[1],   # Set to the number of features in X_train\n",
        "          forward=True,        # True = forward, False = backward\n",
        "          floating=False,      # True para stepwise mixto\n",
        "          scoring='r2',\n",
        "          cv=5)\n",
        "\n",
        "sfs2 = sfs2.fit(X_train, y_train) # Fit sfs2 with the new X_train and y_train\n",
        "\n",
        "print(\"Variables seleccionadas usando SequentialFeatureSelector (Forward):\", sfs2.k_feature_names_)\n",
        "\n",
        "# Crear y ajustar el modelo OLS con las variables seleccionadas\n",
        "X_train_selected = sm.add_constant(X_train[list(sfs2.k_feature_names_)])\n",
        "model_sfs2 = sm.OLS(y_train, X_train_selected).fit() # Create a new model object for this selection\n",
        "\n",
        "# Resumen del modelo OLS\n",
        "print(\"\\nResumen del modelo OLS con variables seleccionadas por SequentialFeatureSelector:\")\n",
        "print(model_sfs2.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ieyhyFMkMbp",
        "outputId": "095934d2-45d1-4ed3-d208-e95b0bc4edf3"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables seleccionadas usando SequentialFeatureSelector (Forward): ('X2 house age', 'X4 number of convenience stores')\n",
            "\n",
            "Resumen del modelo OLS con variables seleccionadas por SequentialFeatureSelector:\n",
            "                                OLS Regression Results                                \n",
            "======================================================================================\n",
            "Dep. Variable:     Y house price of unit area   R-squared:                       0.377\n",
            "Model:                                    OLS   Adj. R-squared:                  0.372\n",
            "Method:                         Least Squares   F-statistic:                     86.44\n",
            "Date:                        Fri, 05 Sep 2025   Prob (F-statistic):           4.33e-30\n",
            "Time:                                16:48:04   Log-Likelihood:                -1101.1\n",
            "No. Observations:                         289   AIC:                             2208.\n",
            "Df Residuals:                             286   BIC:                             2219.\n",
            "Df Model:                                   2                                         \n",
            "Covariance Type:                    nonrobust                                         \n",
            "===================================================================================================\n",
            "                                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------------------------\n",
            "const                              31.8328      1.476     21.560      0.000      28.927      34.739\n",
            "X2 house age                       -0.2638      0.057     -4.647      0.000      -0.376      -0.152\n",
            "X4 number of convenience stores     2.6846      0.217     12.394      0.000       2.258       3.111\n",
            "==============================================================================\n",
            "Omnibus:                      173.051   Durbin-Watson:                   1.960\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             2050.934\n",
            "Skew:                           2.198   Prob(JB):                         0.00\n",
            "Kurtosis:                      15.288   Cond. No.                         48.6\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import numpy as np\n",
        "\n",
        "# Predict on the test set\n",
        "# Select only the columns used for training from the test set before adding the constant\n",
        "X_test_selected = sm.add_constant(X_test[list(sfs2.k_feature_names_)])\n",
        "y_pred = model_sfs2.predict(X_test_selected)\n",
        "\n",
        "# Calculate metrics\n",
        "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Calculate Adjusted R2\n",
        "n = X_test.shape[0]  # Number of observations\n",
        "p = X_test_selected.shape[1] - 1 # Number of features (excluding the constant)\n",
        "adjusted_r2 = 1 - (1 - r2) * (n - 1) / (n - p - 1)\n",
        "\n",
        "# Calculate MAPE (add a small epsilon to prevent division by zero)\n",
        "epsilon = 1e-10\n",
        "mape = np.mean(np.abs((y_test - y_pred) / (y_test + epsilon))) * 100\n",
        "\n",
        "\n",
        "print(\"--- Linear Regression Model Metrics (Test Set) ---\")\n",
        "print(f\"RMSE: {rmse:.2f}\")\n",
        "print(f\"MAE: {mae:.2f}\")\n",
        "print(f\"R2: {r2:.2f}\")\n",
        "print(f\"Adjusted R2: {adjusted_r2:.2f}\")\n",
        "print(f\"MAPE: {mape:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f72259fe-c2fa-46f8-bc55-ad2ff75567f7",
        "id": "sS-TrxeE8zA4"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Linear Regression Model Metrics (Test Set) ---\n",
            "RMSE: 10.08\n",
            "MAE: 7.87\n",
            "R2: 0.39\n",
            "Adjusted R2: 0.38\n",
            "MAPE: 28.22%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Analisis de Resultados**\n",
        "En este analisis se explicara el proceso realizo a lo largo del codigo con la explicacion de sus respectivos resultados:\n",
        "\n",
        "1. Se realizo una inspeccion de los datos, sus respectivas medidas de tendencia central, la correlacion entre las variables, la revision de la ecuacion y coeficientes de la regresion simple donde se encontraron los siguientes resultados que las variable X3(distancia a la estacion de metro mas cercana) era la que mayor correlacion tenia con respecto a las demas principalmente con la variable X6(Longitud) con un 82% de correlacion ademas se evidencio que las variables X1(Dia de transaccion),X4(Numero de tiendas de conveniencia cercanas) y X5(Latitud) tienen un relacion positiva rrespecto a la variable a predecir lo que indica que por una unidad de cambio en estas variables se aumentaria el precio de la vivienda por unidad de área en 5.84, 1.07 y 2.39 dolares respectivamente;mientras que para las variables X2,X3 Y X6 (años de la casa, metros de distancia a una estacion de metro y longitud) tienen una relacion negativa en otras palabras por una unidad de cambio en esta variables el precio disminuiria 2.42, 5.13, 5.22 dolares respectivamente.\n",
        "\n",
        "2. Se realizo la particion de los datos y se diseño el modelo de regresion utilizando el metodo forward el cual nos arrojo que las variables con las cuales el modelo dan el mejor resultado  de regresion lineal son: X1 (dia de transaccion), X2 (años de la casa), X3 (distancia a la estacion de metro mas cercana), X4(tiendas de conveniencia cercanas), X5 (latitud) con un R2 ajustado de 55% y p values menores al 5% y errores menores al 10% y 22% en el caso del MAPE lo que nos indica que el modelo tiene poco error respecto a los datos, sin embargo mostrando problemas de multicolinealidad los cuales se trataron de solucionaron utilizando regresiones regularizadas los cuales dieron resultados estadisticos y errores muy similares al modelo de regresion lineal inicial, sin embargo analizando los coeficientes se encontro que las variables mas importantes para la prediccion de los datos eran X2(Años de la casa) y X4(Numero de tiendas de conveniencia cercanas) por lo cual se opto por realizar un ultimo modelo solo utilizando estas 2 variables el cual tiene la misma interpretacion de sus coeficiente que puede ser explicada con el primer modelo ademas de que acabo con los problemas de multicolinealidad pero disminuyo mucho las metricas estadisticas y errores respecto al modelo original\n",
        "\n",
        "3. En conclusion se considera que el mejor modelo para predecir es el ultimo modelo debido a que puede predecir y explicar la variable predictora sin problemas de multicolinealidad a pesar de tener metricas inferiores de desempeño (Errores y Estadisticos) y tiene coeficientes con una buena interpretabilidad hacia generar insigths para el negocio, sin embrago se considera que el modelo inicial y los modelos regularizados puede contribuir para entender la relacion de la variables independientes con la variable predictora y la importancia de estas en la prediccion por lo cual no se descartarian sino que se utilizarian para analizar lo dicho previamente.\n"
      ],
      "metadata": {
        "id": "bRuxNVcYlH-N"
      }
    }
  ]
}